/**

\page tutorial-visp-wrapper-pass-frame Tutorial: Basic Unity appication using the visp wrapper plugin
\tableofcontents

\section intro_visp_wrapper_basic Introduction

This tutorial explains how to develop a unity project which uses our visp wrapper as plugin. We will not only see how to write and compile these
plugins but also how to use them in Unity editor. For this tutorial we will see how to write basic functions in visp which perform the following
functions:
- Find dot products of two vectors. \f$ dot_prod(unsigned int* const A) \f$
- pass webcam feed from Unity as bitmap to visp. \f$ passFrame(unsigned char* const bitmap, int height, int width) \f$

\section required_package Packages used
- ViSP 3.1.0 that could be downloaded at :[<a href="https://visp.inria.fr/download/" target="_blank">https://visp.inria.fr/download/</a>];
- Visual Studio C++. Note that ViSP can also be build with Visual Studio Express that could be downloaded at :[<a href = "http://www.microsoft.com/visualstudio/eng/products/visual-studio-express-products" target="_blank"> http://www.microsoft.com/visualstudio/eng/products/visual-studio-express-products </a>];
- CMake 2.8 or higher that could be download at : [<a href="http://www.cmake.org/cmake/resources/software.html" target="_blank"> http://www.cmake.org/cmake/resources/software.html </a>];
- Unity3D Engine 5.6.1f1 Personal (64bit) that could be downloaded at [<a href="https://unity3d.com/get-unity/download/archive" target="_blank" >https://unity3d.com/get-unity/download/archive</a>];

\section source_code Source Code and Structure
In this section we look at the code structure and functions required to compile the source as a shared library file. This is done so that when these shared
libraries are imported in Unity, the ViSP functions can be called and utilized. Basically we're writing Native Plugins for unity, using ViSP C++ class functionalities.
You can learn more about writing Native C++ plugins in Unity [<a href="http://www.alanzucconi.com/2015/10/11/how-to-write-native-plugins-for-unity/" target="_blank">here</a>];

\note It may be useful to go through Unity's [<a href="https://docs.unity3d.com/Manual/Plugins.html" target="_blank">Official Documentation</a>]; on Plugins.

All the material (source code) described in this tutorial is part of ViSP source code and could be downloaded using the following command:

\code
$ svn export https://github.com/lagadic/visp_unity
\endcode

The corresponding source code also provided in visp-plugin-frame.h is the following.

\include visp-plugin-frame.h

Here is the detailed explanation of the lines introduced in the source code.

We include the following headers to use the class functionalities of : vpMatrix, vpTranslationVector, vpMath for performing dot product on two vectors.
We also include header vpImage to store the image by passing the image data as a bitmap.

\code
#include <visp3/core/vpConfig.h>
#include <visp3/core/vpMatrix.h>
#include <visp3/core/vpMath.h>
#include <visp3/core/vpTranslationVector.h>
#include <visp3/core/vpImage.h>
\endcode

We intend to export these functions in form of a shared library. It is necessary that function definitions are bound to __declspec(dllexport).
VISP_EXPORT does that for us, which is defined in vpConfig.

The underlying concept for writing functions in C++ to be used in a shared library is, since we're establishing communication
between C++ (ViSP) and C# (Unity) we have to pass data as basic data types like int, char, float and avoid using complex data types (like string, vectors etc).
This is why pass by reference is preferred over pass by value.

\code
VISP_EXPORT double dot_prod(unsigned int* const A);
VISP_EXPORT void passFrame(unsigned char* const bitmap, int height, int width);
\endcode

Following is the C++ code for the plugin (visp-plugin-frame.cpp)
\include visp-plugin-frame.cpp

The source primarily takes care of two functionalities: passing image data from unity to visp and returning dot product of vectors.

Every plugin library code consists of a bunch of functions which need to be exported to unity. These modules find use in various application
in Unity depending on what feature we want to implement in Unity using ViSP classes.

Since, Unity plugins are shared library code files, which need to be imported in Unity, depending of the users, they can either compile the library
code in Windows or Linux platforms. For compiling the library on Windows platform (MS Visual Studio & CMake) : we need to include the function
blocks in \c extern "C", which is necessary to export the references to the defined functions into the DLL. Whereas for Linux platforms \c extern "C"
is not required.

\code
extern "C" {
\endcode

Defining vpImage as a global variable, to be used for storing and processing passed frame data.

\code
vpImage<unsigned char> image;
\endcode

The function dot_prod() passes an unsigned int array as an argument containing two vectors. The function simply extracts the vector data and performs
simple dot product operation on them:

\code
double dot_prod(unsigned int* const A){
\endcode

Similarly, in the function passFrame we pass image data as a byte array, with the frame width and height. Variable \c image is resized according to
Unity frame dimensions. Finally, the byte array is stored as a bitmap in the global variable \c image.

\code
void passFrame(unsigned char* const bitmap, int height, int width){
\endcode

\section compilation-instructions Compilation and instructions
In this section we will see how to compile the shared library on Unix and Windows platforms.

\subsection image_cmake
Now you have to create your \c CMakeLists.txt file. It should look like this:

\code

project(VISP_WRAPPER)

cmake_minimum_required(VERSION 2.6)

find_package(VISP REQUIRED visp_core visp_blob visp_vision)

include_directories(${VISP_INCLUDE_DIRS})

add_library(visp-plugin-frame SHARED visp-plugin-frame.cpp)
target_link_libraries(visp-plugin-frame ${VISP_LIBRARIES})

\endcode

The \c find_package() CMake command searches for a \c VISPConfig.cmake file that will define the corresponding variables:
- \c VISP_INCLUDE_DIRS   : ViSP and third-party headers location
- \c VISP_LIBRARIES      : ViSP and third-party libraries name and location


\subsection image_unix On Unix-like systems
Configure your project. Proceed as with any other project using CMake:

\code
$ cmake .
\endcode

By default \c cmake searches \c VISPConfig.cmake file in folders like \c /usr/share or \c /usr/local/share. If ViSP was not installed in \c /usr or \c /usr/local it is possible that you get the following error:
\code
CMake Error at CMakeLists.txt:5 (find_package):
  Could not find module FindVISP.cmake or a configuration file for package
  VISP.

  Adjust CMAKE_MODULE_PATH to find FindVISP.cmake or set VISP_DIR to the
  directory containing a CMake configuration file for VISP.  The file will
  have one of the following names:

    VISPConfig.cmake
    visp-config.cmake
\endcode

To help \c cmake to find \c VISPConfig.cmake file, just set \c VISP_DIR environment variable and call \c cmake again:
\code
$ export VISP_DIR=/home/ViSP-install-folder/lib/<multi-arch-folder>/cmake/visp
$ cmake .
\endcode
or run cmake with the additional VISP_DIR definition
\code
$ cmake -DVISP_DIR=/home/ViSP-install-folder/lib/<multi-arch-folder>/cmake/visp .
\endcode

Depending on the platform \c \<multi-arch-folder\> can be empty (OSX) or for example equal to \c x86_64-linux-gnu on Ubuntu.

\note If you build ViSP from source following one of the tutorials \ref tutorial_install_src, you can avoid the \c make \c install step and set \c VISP_DIR to the build location instead of the install location.

\subsection image_unix_build Include the shared library file.

Just run:
\code
$ make
\endcode

This will generate a shared library file \c visp-plugin-frame.so. Which needs to be imported in out Unity C# script.


\subsection image_win On Windows

We suppose from now, that you have created a folder (let say \c C:/ViSP/ViSP-Unity) that contains the following files: CMakeLists.txt, visp-plugin-frame.cpp. These files are also provided on this [<a href="https://github.com/lagadic/visp_unity/tree/master/vispWrapper" target="_blank">link</a>]

\subsection image_win_config Configure your project

- Launch CMake (cmake-gui) from Windows "Start" menu. Set the source code location as \c C:/ViSP-Plugin-Demo/vispWrapper. Here we set the build location to be \c C:/ViSP-Plugin-Demo/vispWrapper-build.

\image html img-started-win-cmake-1.jpg

- Press "Configure" button, and select your compiler. In our case we will use Visual Studio 14 Win64. Press then "Finish". The configuration is now under progress and should lead to the following image.

\image html img-started-win-cmake-2.jpg

- Note here that CMake has automatically found the location of ViSP install folder; \c C:/ViSP/ViSP-install.

- Press then "Configure" button to remove the red lines, and then "Generate" button. As presented in the following image, all the red lines should disappear.

\image html img-started-win-cmake-3.jpg

- From now, in \c C:/ViSP-Plugin-Demo/vispWrapper-build you should have \c VISP_WRAPPER.sln Visual Studio solution file.

\subsection image_win_build Generate the DLL file

- To open the project in Visual Studio C++ just double click on \c C:/ViSP-Plugin-Demo/vispWrapper-build/VISP_WRAPPER.sln solution file.

\image html img-started-win-msvc-1.jpg

- Now to build the solution, enter "BUILD/Build Solution" menu.

\image html img-started-win-msvc-2.jpg

- In \c C:/ViSP-Plugin-Demo/vispWrapper-build/Debug folder you have now \c visp-plugin-frame.dll executable.

\section unity_import Importing in Unity
Now that we have compiled our shared library, \c visp-plugin-frame.so / \c visp-plugin-frame.dll. For importing functions in the Unity Script,
we just have to include the library file in our Unity project's \c  /Assets/plugins folder. If a \c plugins folder doesn't exist in your Project/Assets folder,
simply create one, followed by including the library file in it.

\subsection unity_script Calling Convention in Unity.
Now we will import the functions in our Unity script \c demo.cs. Following is the code for doing this:

\code
// Import DLL (visp-plugin-frame.dll)
[DllImport("visp-plugin-frame", CallingConvention = CallingConvention.Cdecl, EntryPoint = "dot_prod")]
//Imported function dot_prod()
public static extern double dot_prod(uint[] vec);

// Import DLL (visp-plugin-frame.dll)
[DllImport("visp-plugin-frame", CallingConvention = CallingConvention.Cdecl, EntryPoint = "passFrame")]
//Imported function passFrame()
public static extern void passFrame(byte[] bitmap, int height, int width);
\endcode

\note You can find the entire code for the C# Unity script <a href="https://github.com/lagadic/visp_unity/blob/master/unityProject/Assets/demo.cs" target="_blank">here</a>.

\section image_next Next tutorial
In the next tutorial we deal with pose estimation in Unity using ViSP libraries. You are now ready to goto \ref tutorial-visp-unity-pose-estimate.

*/
