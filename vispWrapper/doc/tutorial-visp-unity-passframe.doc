/**

\page tutorial-visp-wrapper-pass-frame Tutorial: Basic Unity appication using the visp wrapper plugin
\tableofcontents

\section intro_visp_wrapper_basic Introduction

This tutorial explains how to develop a unity project which uses our visp wrapper as plugin. We will not only see how to write and compile these
plugins but also how to use them in Unity editor. For this tutorial we will see how to write basic functions in visp which perform the following
functions:
- Find dot products of two vectors. \f$ dot_prod(unsigned int* const A) \f$
- pass webcam feed from Unity as bitmap to visp. \f$ passFrame(unsigned char* const bitmap, int height, int width) \f$

\section required_package Packages used
- ViSP 3.1.0 that could be downloaded at :[<a href="https://visp.inria.fr/download/" target="_blank">https://visp.inria.fr/download/</a>];
- Visual Studio C++. Note that ViSP can also be build with Visual Studio Express that could be downloaded at :[<a href = "http://www.microsoft.com/visualstudio/eng/products/visual-studio-express-products" target="_blank"> http://www.microsoft.com/visualstudio/eng/products/visual-studio-express-products </a>];
- CMake 2.8 or higher that could be download at : [<a href="http://www.cmake.org/cmake/resources/software.html" target="_blank"> http://www.cmake.org/cmake/resources/software.html </a>];
- Unity3D Engine 5.6.1f1 Personal (64bit) that could be downloaded at [<a href="https://unity3d.com/get-unity/download/archive" target="_blank" >https://unity3d.com/get-unity/download/archive</a>];

\section source_code Source Code and Structure
In this section we look at the code structure and functions required to compile the source as a shared library file. This is done so that when these shared
libraries are imported in Unity, the ViSP functions can be called and utilized. Basically we're writing Native Plugins for unity, using ViSP C++ class functionalities.
You can learn more about writing Native C++ plugins in Unity [<a href="http://www.alanzucconi.com/2015/10/11/how-to-write-native-plugins-for-unity/" target="_blank">here</a>];

\note It may be useful to go through Unity's [<a href="https://docs.unity3d.com/Manual/Plugins.html" target="_blank">Official Documentation</a>]; on Plugins.

All the material (source code) described in this tutorial is part of ViSP source code and could be downloaded using the following command:

\code
$ svn export https://github.com/lagadic/visp_unity
\endcode

The corresponding source code also provided in visp-plugin-frame.h is the following.

\include visp-plugin-frame.h

Here is the detailed explanation of the lines introduced in the source code.

We include the following headers to use the class functionalities of : vpMatrix, vpTranslationVector, vpMath for performing dot product on two vectors.
We also include header vpImage to store the image by passing the image data as a bitmap.

\code
#include <visp3/core/vpConfig.h>
#include <visp3/core/vpMatrix.h>
#include <visp3/core/vpMath.h>
#include <visp3/core/vpTranslationVector.h>
#include <visp3/core/vpImage.h>
\endcode

We intend to export these functions in form of a shared library. It is necessary that function definitions are bound to __declspec(dllexport).
VISP_EXPORT does that for us, which is defined in vpConfig.

The underlying concept for writing functions in C++ to be used in a shared library is, since we're establishing communication
between C++ (ViSP) and C# (Unity) we have to pass data as basic data types like int, char, float and avoid using complex data types (like string, vectors etc).
This is why pass by reference is preferred over pass by value.

\code
VISP_EXPORT double dot_prod(unsigned int* const A);
VISP_EXPORT void passFrame(unsigned char* const bitmap, int height, int width);
\endcode

Following is the C++ code for the plugin (visp-plugin-frame.cpp)
\include visp-plugin-frame.cpp

visp-plugin-frame.cpp primarily takes care of two functionalities: passing image data from unity to visp and returning dot product of vectors.

Every plugin library code consists of a bunch of functions which need to be exported to unity. These modules find use in various application
in Unity depending on what feature we want to implement in Unity using ViSP classes.

Since, Unity plugins are shared library code files, which need to be imported in Unity, depending of the users, they can either compile the library
code in Windows or Linux platforms. For compiling the library on Windows platform (MS Visual Studio & CMake) : we need to include the function
blocks in ' extern "C" ', which is necessary to export the references to the defined functions into the DLL. Whereas for Linux platforms extern "C"
is not required.

\code
extern "C" {
\endcode

Defining vpImage as a global variable, to be used for storing and processing passed frame data.

\code
vpImage<unsigned char> image;
\endcode

The function dot_prod() passes an unsigned int array as an argument containing two vectors. The function simply extracts the vector data and performs
simple dot product operation on them:

\code
double dot_prod(unsigned int* const A){
\endcode

Similarly, in the function passFrame we pass image data as a byte array, with the frame width and height. Variable "image" is resized according to
Unity frame dimensions. Finally, the byte array is stored as a bitmap in the global variable "image".

\code
void passFrame(unsigned char* const bitmap, int height, int width){
\endcode


*/
